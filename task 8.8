a={1, 2, 3, 'Add', 'fruit', 'apple'}
b=[1, 2, 3, 'ok', 'orange'] # list
c=(12,'hello')  # tuple
a.update(b, c)
print(a)
# {'hello', 1, 2, 3, 'fruit', 'ok', 12, 'orange', 'apple', 'Add'}

# данный метод в нескольких set'ах находит похожие
a = {1, 2, 3, 4, 'Add', 'fruit','apple'}
b = {1, 2, 3, 4, 5, 'ok','orange'}
c = {12, 3 , 4, 'hello'}
d=a.intersection(c, b)
print(d) # результат будет {3, 4}

# еще пример метода intersection
a = {1,2}
b = {1, 5}
d = b.intersection(a)
print(d)

# метод вывода на экран только похожие значения
a={1, 2, 3, 4, 'Add', 'fruit', 'apple'}
b={1, 2, 3, 4, 'ok','orange'}
c= a & b # & между переменными убирает при выводе на эркан походие значения
print(c) # {1, 2, 3, 4}

# метод выведение на экран всех значении кроме выделенного 
a = {1, 3, 4, 'Add', 'fruit', 'apple'}
a.remove('fruit')
print(a) #{1, 3, 4, 'apple', 'Add'}

# тот же метод "удаления" но по индексу
a = {1, 3, 4, 'Add', 'fruit', 'apple'}
a.remove(4)
print(a) #{1, 3, 'fruit', 'apple', 'Add'}

#??????? метод вывода на экран из двух set'ов уникальных(недублирующих) значени
a = {1, 3, 4, 'Add', 'fruit', 'apple'}
s = {1, 2, 3, 4,  'Add', 'apple', 'so'}
a.difference(s)
print(a) # {1, 'apple', 'fruit', 3, 4, 'Add'}


a = {1, 'ok'}
b = {2, 'ok'}
b.difference(a)
print(b)


s1 = {1, 2}
s2 = {23, 1}
v = s1 - s2
print(v)


a = {1, 3}
b = {1,4}
a.intersection_update(b)
print(a)


a = {'sasaa', 1221}
a.clear()
print(a)


a = {1, 3, 4, 'Add', 'fruit', 'apple'}
print('original set:', a)
a.discard('l')
print(a)
print('delete objects:', a.pop())
print(a)


a = {1, 'add', 'pop'}
a.discard('add')
print(a)




a = {1:'Python', 2:'ITC'}
print(type(a), a)
a['lang']='Python'

s = {'lang':'Python', 'author': 'Van Rossum', 'year': 1991}
print(s.items())


a = {'hello': 1, 2:'ok'}
b = {6:'sd'}
a.update({3 : 'l'})
a.update(b)
a['s']=21
print(a)
